// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userName(): string {
    return this._event.parameters[1].value.toString();
  }

  get displayName(): string {
    return this._event.parameters[2].value.toString();
  }

  get bio(): string {
    return this._event.parameters[3].value.toString();
  }

  get image(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BidPlaced extends ethereum.Event {
  get params(): BidPlaced__Params {
    return new BidPlaced__Params(this);
  }
}

export class BidPlaced__Params {
  _event: BidPlaced;

  constructor(event: BidPlaced) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get postId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BiddableTokenPurchased extends ethereum.Event {
  get params(): BiddableTokenPurchased__Params {
    return new BiddableTokenPurchased__Params(this);
  }
}

export class BiddableTokenPurchased__Params {
  _event: BiddableTokenPurchased;

  constructor(event: BiddableTokenPurchased) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InfoChanged extends ethereum.Event {
  get params(): InfoChanged__Params {
    return new InfoChanged__Params(this);
  }
}

export class InfoChanged__Params {
  _event: InfoChanged;

  constructor(event: InfoChanged) {
    this._event = event;
  }

  get displayName(): string {
    return this._event.parameters[0].value.toString();
  }

  get bio(): string {
    return this._event.parameters[1].value.toString();
  }

  get image(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PostCreated extends ethereum.Event {
  get params(): PostCreated__Params {
    return new PostCreated__Params(this);
  }
}

export class PostCreated__Params {
  _event: PostCreated;

  constructor(event: PostCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get buyStatus(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get sellValue(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PostDetailsChanged extends ethereum.Event {
  get params(): PostDetailsChanged__Params {
    return new PostDetailsChanged__Params(this);
  }
}

export class PostDetailsChanged__Params {
  _event: PostDetailsChanged;

  constructor(event: PostDetailsChanged) {
    this._event = event;
  }

  get postId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidDuration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PostRewardClaimed extends ethereum.Event {
  get params(): PostRewardClaimed__Params {
    return new PostRewardClaimed__Params(this);
  }
}

export class PostRewardClaimed__Params {
  _event: PostRewardClaimed;

  constructor(event: PostRewardClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get postId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PostSold extends ethereum.Event {
  get params(): PostSold__Params {
    return new PostSold__Params(this);
  }
}

export class PostSold__Params {
  _event: PostSold;

  constructor(event: PostSold) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Social_Blocks__getLastBidInfoByIdResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Social_Blocks__getPostInfoResultValue0Struct extends ethereum.Tuple {
  get buyStatus(): i32 {
    return this[0].toI32();
  }

  get sellValue(): BigInt {
    return this[1].toBigInt();
  }

  get bidDuration(): BigInt {
    return this[2].toBigInt();
  }

  get uri(): string {
    return this[3].toString();
  }
}

export class Social_Blocks__userInfoResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;

  constructor(value0: string, value1: string, value2: string, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }
}

export class Social_Blocks extends ethereum.SmartContract {
  static bind(address: Address): Social_Blocks {
    return new Social_Blocks("Social_Blocks", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLastBidInfoById(_postId: BigInt): Social_Blocks__getLastBidInfoByIdResult {
    let result = super.call(
      "getLastBidInfoById",
      "getLastBidInfoById(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_postId)]
    );

    return new Social_Blocks__getLastBidInfoByIdResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getLastBidInfoById(
    _postId: BigInt
  ): ethereum.CallResult<Social_Blocks__getLastBidInfoByIdResult> {
    let result = super.tryCall(
      "getLastBidInfoById",
      "getLastBidInfoById(uint256):(address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_postId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Social_Blocks__getLastBidInfoByIdResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getOwnerById(_postId: BigInt): Address {
    let result = super.call("getOwnerById", "getOwnerById(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_postId)
    ]);

    return result[0].toAddress();
  }

  try_getOwnerById(_postId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOwnerById",
      "getOwnerById(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_postId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPostInfo(_postId: BigInt): Social_Blocks__getPostInfoResultValue0Struct {
    let result = super.call(
      "getPostInfo",
      "getPostInfo(uint256):((uint8,uint256,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(_postId)]
    );

    return changetype<Social_Blocks__getPostInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPostInfo(
    _postId: BigInt
  ): ethereum.CallResult<Social_Blocks__getPostInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPostInfo",
      "getPostInfo(uint256):((uint8,uint256,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(_postId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Social_Blocks__getPostInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  idToLikes(param0: BigInt): BigInt {
    let result = super.call("idToLikes", "idToLikes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_idToLikes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("idToLikes", "idToLikes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  idToOwner(param0: BigInt): Address {
    let result = super.call("idToOwner", "idToOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_idToOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("idToOwner", "idToOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAddressReserved(_address: Address): string {
    let result = super.call(
      "isAddressReserved",
      "isAddressReserved(address):(string)",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toString();
  }

  try_isAddressReserved(_address: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "isAddressReserved",
      "isAddressReserved(address):(string)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNameReserved(nameString: string): boolean {
    let result = super.call("isNameReserved", "isNameReserved(string):(bool)", [
      ethereum.Value.fromString(nameString)
    ]);

    return result[0].toBoolean();
  }

  try_isNameReserved(nameString: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNameReserved",
      "isNameReserved(string):(bool)",
      [ethereum.Value.fromString(nameString)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  postLastBidder(param0: BigInt): Address {
    let result = super.call(
      "postLastBidder",
      "postLastBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_postLastBidder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "postLastBidder",
      "postLastBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardClaimed(param0: Address): BigInt {
    let result = super.call(
      "rewardClaimed",
      "rewardClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardClaimed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardClaimed",
      "rewardClaimed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toLower(str: string): string {
    let result = super.call("toLower", "toLower(string):(string)", [
      ethereum.Value.fromString(str)
    ]);

    return result[0].toString();
  }

  try_toLower(str: string): ethereum.CallResult<string> {
    let result = super.tryCall("toLower", "toLower(string):(string)", [
      ethereum.Value.fromString(str)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBid(param0: Address, param1: BigInt): BigInt {
    let result = super.call("userBid", "userBid(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_userBid(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBid",
      "userBid(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): Social_Blocks__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(string,string,string,string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Social_Blocks__userInfoResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<Social_Blocks__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(string,string,string,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Social_Blocks__userInfoResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString()
      )
    );
  }

  userName(param0: Address): string {
    let result = super.call("userName", "userName(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toString();
  }

  try_userName(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall("userName", "userName(address):(string)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userPostIds(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userPostIds",
      "userPostIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userPostIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPostIds",
      "userPostIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateName(str: string): boolean {
    let result = super.call("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(str)
    ]);

    return result[0].toBoolean();
  }

  try_validateName(str: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(str)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verify(
    _signer: Address,
    _signature: Bytes,
    signedMessageHash: Bytes
  ): boolean {
    let result = super.call("verify", "verify(address,bytes,bytes32):(bool)", [
      ethereum.Value.fromAddress(_signer),
      ethereum.Value.fromBytes(_signature),
      ethereum.Value.fromFixedBytes(signedMessageHash)
    ]);

    return result[0].toBoolean();
  }

  try_verify(
    _signer: Address,
    _signature: Bytes,
    signedMessageHash: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(address,bytes,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(_signer),
        ethereum.Value.fromBytes(_signature),
        ethereum.Value.fromFixedBytes(signedMessageHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  walletOfOwner(_owner: Address): Array<BigInt> {
    let result = super.call(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );

    return result[0].toBigIntArray();
  }

  try_walletOfOwner(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "walletOfOwner",
      "walletOfOwner(address):(uint256[])",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BuyPostCall extends ethereum.Call {
  get inputs(): BuyPostCall__Inputs {
    return new BuyPostCall__Inputs(this);
  }

  get outputs(): BuyPostCall__Outputs {
    return new BuyPostCall__Outputs(this);
  }
}

export class BuyPostCall__Inputs {
  _call: BuyPostCall;

  constructor(call: BuyPostCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyPostCall__Outputs {
  _call: BuyPostCall;

  constructor(call: BuyPostCall) {
    this._call = call;
  }
}

export class ChangeAdminAddressCall extends ethereum.Call {
  get inputs(): ChangeAdminAddressCall__Inputs {
    return new ChangeAdminAddressCall__Inputs(this);
  }

  get outputs(): ChangeAdminAddressCall__Outputs {
    return new ChangeAdminAddressCall__Outputs(this);
  }
}

export class ChangeAdminAddressCall__Inputs {
  _call: ChangeAdminAddressCall;

  constructor(call: ChangeAdminAddressCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminAddressCall__Outputs {
  _call: ChangeAdminAddressCall;

  constructor(call: ChangeAdminAddressCall) {
    this._call = call;
  }
}

export class ChangePostInfoCall extends ethereum.Call {
  get inputs(): ChangePostInfoCall__Inputs {
    return new ChangePostInfoCall__Inputs(this);
  }

  get outputs(): ChangePostInfoCall__Outputs {
    return new ChangePostInfoCall__Outputs(this);
  }
}

export class ChangePostInfoCall__Inputs {
  _call: ChangePostInfoCall;

  constructor(call: ChangePostInfoCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _buyStatus(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bidDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChangePostInfoCall__Outputs {
  _call: ChangePostInfoCall;

  constructor(call: ChangePostInfoCall) {
    this._call = call;
  }
}

export class ChangePostPriceCall extends ethereum.Call {
  get inputs(): ChangePostPriceCall__Inputs {
    return new ChangePostPriceCall__Inputs(this);
  }

  get outputs(): ChangePostPriceCall__Outputs {
    return new ChangePostPriceCall__Outputs(this);
  }
}

export class ChangePostPriceCall__Inputs {
  _call: ChangePostPriceCall;

  constructor(call: ChangePostPriceCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangePostPriceCall__Outputs {
  _call: ChangePostPriceCall;

  constructor(call: ChangePostPriceCall) {
    this._call = call;
  }
}

export class ChangePostStatusCall extends ethereum.Call {
  get inputs(): ChangePostStatusCall__Inputs {
    return new ChangePostStatusCall__Inputs(this);
  }

  get outputs(): ChangePostStatusCall__Outputs {
    return new ChangePostStatusCall__Outputs(this);
  }
}

export class ChangePostStatusCall__Inputs {
  _call: ChangePostStatusCall;

  constructor(call: ChangePostStatusCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _status(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ChangePostStatusCall__Outputs {
  _call: ChangePostStatusCall;

  constructor(call: ChangePostStatusCall) {
    this._call = call;
  }
}

export class ChangeRewardFactorCall extends ethereum.Call {
  get inputs(): ChangeRewardFactorCall__Inputs {
    return new ChangeRewardFactorCall__Inputs(this);
  }

  get outputs(): ChangeRewardFactorCall__Outputs {
    return new ChangeRewardFactorCall__Outputs(this);
  }
}

export class ChangeRewardFactorCall__Inputs {
  _call: ChangeRewardFactorCall;

  constructor(call: ChangeRewardFactorCall) {
    this._call = call;
  }

  get _rewardFactor(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeRewardFactorCall__Outputs {
  _call: ChangeRewardFactorCall;

  constructor(call: ChangeRewardFactorCall) {
    this._call = call;
  }
}

export class ChangeRewardTokenCall extends ethereum.Call {
  get inputs(): ChangeRewardTokenCall__Inputs {
    return new ChangeRewardTokenCall__Inputs(this);
  }

  get outputs(): ChangeRewardTokenCall__Outputs {
    return new ChangeRewardTokenCall__Outputs(this);
  }
}

export class ChangeRewardTokenCall__Inputs {
  _call: ChangeRewardTokenCall;

  constructor(call: ChangeRewardTokenCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRewardTokenCall__Outputs {
  _call: ChangeRewardTokenCall;

  constructor(call: ChangeRewardTokenCall) {
    this._call = call;
  }
}

export class ClaimBidCall extends ethereum.Call {
  get inputs(): ClaimBidCall__Inputs {
    return new ClaimBidCall__Inputs(this);
  }

  get outputs(): ClaimBidCall__Outputs {
    return new ClaimBidCall__Outputs(this);
  }
}

export class ClaimBidCall__Inputs {
  _call: ClaimBidCall;

  constructor(call: ClaimBidCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimBidCall__Outputs {
  _call: ClaimBidCall;

  constructor(call: ClaimBidCall) {
    this._call = call;
  }
}

export class ClaimPostRewardCall extends ethereum.Call {
  get inputs(): ClaimPostRewardCall__Inputs {
    return new ClaimPostRewardCall__Inputs(this);
  }

  get outputs(): ClaimPostRewardCall__Outputs {
    return new ClaimPostRewardCall__Outputs(this);
  }
}

export class ClaimPostRewardCall__Inputs {
  _call: ClaimPostRewardCall;

  constructor(call: ClaimPostRewardCall) {
    this._call = call;
  }

  get _postId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _likesCount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get signedMessageHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ClaimPostRewardCall__Outputs {
  _call: ClaimPostRewardCall;

  constructor(call: ClaimPostRewardCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get _userInfo(): CreateAccountCall_userInfoStruct {
    return changetype<CreateAccountCall_userInfoStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class CreateAccountCall_userInfoStruct extends ethereum.Tuple {
  get userName(): string {
    return this[0].toString();
  }

  get displayName(): string {
    return this[1].toString();
  }

  get bio(): string {
    return this[2].toString();
  }

  get image(): string {
    return this[3].toString();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _buyStatus(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _sellValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bidDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenURI_(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateUserInfoCall extends ethereum.Call {
  get inputs(): UpdateUserInfoCall__Inputs {
    return new UpdateUserInfoCall__Inputs(this);
  }

  get outputs(): UpdateUserInfoCall__Outputs {
    return new UpdateUserInfoCall__Outputs(this);
  }
}

export class UpdateUserInfoCall__Inputs {
  _call: UpdateUserInfoCall;

  constructor(call: UpdateUserInfoCall) {
    this._call = call;
  }

  get _userInfo(): UpdateUserInfoCall_userInfoStruct {
    return changetype<UpdateUserInfoCall_userInfoStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateUserInfoCall__Outputs {
  _call: UpdateUserInfoCall;

  constructor(call: UpdateUserInfoCall) {
    this._call = call;
  }
}

export class UpdateUserInfoCall_userInfoStruct extends ethereum.Tuple {
  get userName(): string {
    return this[0].toString();
  }

  get displayName(): string {
    return this[1].toString();
  }

  get bio(): string {
    return this[2].toString();
  }

  get image(): string {
    return this[3].toString();
  }
}
